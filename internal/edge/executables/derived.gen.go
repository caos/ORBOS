// Code generated by goderive DO NOT EDIT.

package executables

// deriveTupleBuilt returns a function, which returns the input values.
// Since tuples are not first class citizens in Go, this is a way to fake it, because functions that return tuples are first class citizens.
func deriveTupleBuilt(v0 Bin, v1 error) func() (Bin, error) {
	return func() (Bin, error) {
		return v0, v1
	}
}

// deriveTuplePacked returns a function, which returns the input values.
// Since tuples are not first class citizens in Go, this is a way to fake it, because functions that return tuples are first class citizens.
func deriveTuplePacked(v0 Bin, v1 *string, v2 error) func() (Bin, *string, error) {
	return func() (Bin, *string, error) {
		return v0, v1, v2
	}
}

// deriveCurryDebug returns a function that has one parameter, which corresponds to the input functions first parameter, and a result that is a function, which takes the rest of the parameters as input and finally returns the original input function's results.
func deriveCurryDebug(f func(debug bool, gitCommit string, version string, bin Bin) BuiltTuple) func(debug bool) func(gitCommit string, version string, bin Bin) BuiltTuple {
	return func(debug bool) func(gitCommit string, version string, bin Bin) BuiltTuple {
		return func(gitCommit string, version string, bin Bin) BuiltTuple {
			return f(debug, gitCommit, version, bin)
		}
	}
}

// deriveCurryCommit returns a function that has one parameter, which corresponds to the input functions first parameter, and a result that is a function, which takes the rest of the parameters as input and finally returns the original input function's results.
func deriveCurryCommit(f func(gitCommit string, version string, bin Bin) BuiltTuple) func(gitCommit string) func(version string, bin Bin) BuiltTuple {
	return func(gitCommit string) func(version string, bin Bin) BuiltTuple {
		return func(version string, bin Bin) BuiltTuple {
			return f(gitCommit, version, bin)
		}
	}
}

// deriveCurryTag returns a function that has one parameter, which corresponds to the input functions first parameter, and a result that is a function, which takes the rest of the parameters as input and finally returns the original input function's results.
func deriveCurryTag(f func(version string, bin Bin) BuiltTuple) func(version string) func(bin Bin) BuiltTuple {
	return func(version string) func(bin Bin) BuiltTuple {
		return func(bin Bin) BuiltTuple {
			return f(version, bin)
		}
	}
}

// deriveFmap returns an output channel where the items are the result of the input function being applied to the items on the input channel.
func deriveFmap(f func(Bin) BuiltTuple, in <-chan Bin) <-chan BuiltTuple {
	out := make(chan BuiltTuple, cap(in))
	go func() {
		for a := range in {
			b := f(a)
			out <- b
		}
		close(out)
	}()
	return out
}

// deriveFmapPack returns an output channel where the items are the result of the input function being applied to the items on the input channel.
func deriveFmapPack(f func(BuiltTuple) packedTuple, in <-chan BuiltTuple) <-chan packedTuple {
	out := make(chan packedTuple, cap(in))
	go func() {
		for a := range in {
			b := f(a)
			out <- b
		}
		close(out)
	}()
	return out
}

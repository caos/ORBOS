name: Release
on: push
jobs:
  release:
    runs-on: ubuntu-18.04
    steps:
    - name: Source checkout
      uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - name: Go modules cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          go-
    - name: Go build cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/go-build
        key: go-build
    - name: Release
      id: release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GO111MODULE: on
        CGO_ENABLED: 0
      run: |
        export BRANCH=${GITHUB_REF##*/}
        export VERSION=$BRANCH
        [[ "$BRANCH" == "master" ]] && VERSION="v$(npx semantic-release --dry-run --plugins=@semantic-release/commit-analyzer --analize-commits | grep "The next release version is" | sed -ne 's/.*The\ next\ release\ version\ is\ \([0-9]\+\.[0-9]\+\.[0-9]\+\)$/\1/p')"
        export IMAGE=docker.pkg.github.com/caos/orbiter/orbiter
        export TAG_LATEST=${IMAGE}:latest
        export TAG_VERSION=${IMAGE}:${VERSION}
        go mod download
        mkdir -p ./artifacts
        go run cmd/gen-executables/*.go -version "$VERSION" -commit "${{ github.sha }}" --orbctl ./artifacts
        [[ "$BRANCH" == "master" ]] && [[ "$VERSION" == "v" ]] && echo "Exiting, as no new version needs to be released" && exit 0
        echo "Publishing Orbiter version $VERSION"
        docker login docker.pkg.github.com -u ci -p ${GITHUB_TOKEN}
        docker build --tag ${TAG_LATEST} --tag ${TAG_VERSION} .
        docker push ${TAG_VERSION}
        [[ "$BRANCH" == "master" ]] && docker push ${TAG_LATEST}
        [[ "$BRANCH" == "master" ]] && npx semantic-release && exit 0
        echo "##[set-output name=relbranch;]$(echo ${BRANCH})"
        curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/caos/orbiter/releases/$(echo $(curl -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/caos/orbiter/releases/tags/$BRANCH | jq .id))
    - name: Dev Release
      id: dev_release
      uses: actions/create-release@v1
      if: steps.release.outputs.relbranch != null
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release.outputs.relbranch }}
        release_name: Branch ${{ steps.release.outputs.relbranch }}
        body: |
          This is a release from a development branch.
          Do not use these artifacts in production.
        draft: false
        prerelease: true
    - name: Upload Darwin Dev Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: steps.release.outputs.relbranch != null
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.dev_release.outputs.upload_url }}
        asset_path: ./artifacts/orbctl-Darwin-x86_64
        asset_name: orbctl Darwin x86_64
        asset_content_type: application/octet-stream
    - name: Upload FreeBSD Dev Release Asset
      if: steps.release.outputs.relbranch != null
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.dev_release.outputs.upload_url }}
        asset_path: ./artifacts/orbctl-FreeBSD-x86_64
        asset_name: orbctl FreeBSD x86_64
        asset_content_type: application/octet-stream
    - name: Upload Linux Dev Release Asset
      if: steps.release.outputs.relbranch != null
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.dev_release.outputs.upload_url }}
        asset_path: ./artifacts/orbctl-Linux-x86_64
        asset_name: orbctl Linux x86_64
        asset_content_type: application/octet-stream
    - name: Upload OpenBSD Dev Release Asset
      if: steps.release.outputs.relbranch != null
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.dev_release.outputs.upload_url }}
        asset_path: ./artifacts/orbctl-OpenBSD-x86_64
        asset_name: orbctl OpenBSD x86_64
        asset_content_type: application/octet-stream
    - name: Upload Windows Dev Release Asset
      if: steps.release.outputs.relbranch != null
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.dev_release.outputs.upload_url }}
        asset_path: ./artifacts/orbctl-Windows-x86_64.exe
        asset_name: orbctl Windows x86_64
        asset_content_type: application/octet-stream